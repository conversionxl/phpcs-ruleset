<?xml version="1.0"?>
<ruleset name="CXL">

    <!-- Spaces, not tabs. -->
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"/>

    <!--
    We may also want to to include all the rules in WP standard.
    -->
    <rule ref="WordPress-Core">
        <!-- Spaces, not tabs. -->
        <exclude name="Generic.WhiteSpace.DisallowSpaceIndent"/>
    </rule>

    <rule ref="WordPress-Extra">
    </rule>

    <!--
    Allow wider vertical spacing coding style:
    ```php
        ...
        if ( foo ) {
            bar();
        }

    }
    ```
    -->
    <rule ref="WordPress.WhiteSpace.ControlStructureSpacing">
        <properties>
            <property name="blank_line_after_check" value="0"/>
        </properties>
    </rule>

    <rule ref="WordPress">
        <!-- WP filename conventions are incompatible w/ Composer PSR-4 autoloader. -->
        <exclude name="WordPress.Files.FileName"/>

        <!-- Short array syntax ftw. -->
        <exclude name="Generic.Arrays.DisallowShortArraySyntax.Found"/>

        <!-- Short ternary ftw. -->
        <exclude name="WordPress.PHP.DisallowShortTernary.Found"/>
    </rule>

    <!--
    Custom templating frameworks etc.
    @see https://github.com/WordPress/WordPress-Coding-Standards/wiki/Customizable-sniff-properties#xss-custom-printing-functions
    @todo Method elements don't work!
    -->
    <rule ref="WordPress.Security.EscapeOutput">
        <properties>
            <property name="customAutoEscapedFunctions" type="array">
                <element value="cxli"/>
                <element value="get_view_instance"/>
                <element value="render"/>
            </property>
        </properties>
    </rule>

    <!--
    Allow `add_action( 'tag', function() {
    } );
    @see https://github.com/squizlabs/PHP_CodeSniffer/issues/2001
    @see https://github.com/WordPress-Coding-Standards/WordPress-Coding-Standards/issues/1485
    -->
    <rule ref="PEAR.Functions.FunctionCallSignature.ContentAfterOpenBracket">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.MultipleArguments">
        <severity>0</severity>
    </rule>
    <rule ref="PEAR.Functions.FunctionCallSignature.CloseBracketLine">
        <severity>0</severity>
    </rule>

    <rule ref="Squiz.Commenting">
        <!--
        "So far I have not found a use for file-level DocBlocks in closed-source software."
        @see https://localheinz.com/blog/2018/05/06/cost-and-value-of-docblocks/
        -->
        <exclude name="Squiz.Commenting.FileComment.Missing"/>
        <exclude name="Squiz.Commenting.FileComment.MissingPackageTag"/>

        <!-- Usually just repeats the obvious. -->
        <exclude name="Squiz.Commenting.FunctionComment.EmptyThrows"/>
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamComment"/>

        <!-- `//end if` looks silly. -->
        <exclude name="Squiz.Commenting.LongConditionClosingComment.Missing"/>

        <!-- Sometimes useful to describe array members. -->
        <exclude name="Squiz.Commenting.PostStatementComment.Found"/>

        <!--
            If method has multiple parameters, and TypeHint for fewer @param is defined,
            it can detect incorrect type hint and also @param order.
            Note:
                If not excluded, `phpcbf` removes un-necessary @params,
                and `phpcs` tries to detect them, hence circular issue.
        -->
        <exclude name="Squiz.Commenting.FunctionComment.IncorrectTypeHint"/>
        <exclude name="Squiz.Commenting.FunctionComment.ParamNameNoMatch"/>
    </rule>

    <rule ref="Generic.Commenting">
        <!-- Often just /** @since */ is enough. -->
        <exclude name="Generic.Commenting.DocComment.MissingShort"/>
        <!-- /** @todo */ is useful. -->
        <exclude name="Generic.Commenting.Todo.CommentFound"/>
        <exclude name="Generic.Commenting.Todo.TaskFound"/>
    </rule>

    <!--
    @see https://github.com/sirbrillig/phpcs-variable-analysis
    -->
    <rule ref="VariableAnalysis">
        <!-- Slevomat -->
        <exclude name="VariableAnalysis.CodeAnalysis.VariableAnalysis.UnusedVariable"/>
    </rule>

    <!--
    @see https://github.com/slevomat/coding-standard
    -->
    <rule ref="SlevomatCodingStandard">
        <exclude name="SlevomatCodingStandard.Arrays.SingleLineArrayWhitespace"/>
        <exclude name="SlevomatCodingStandard.Classes.ModernClassNameReference.ClassNameReferencedViaMagicConstant"/>
        <exclude name="SlevomatCodingStandard.Classes.ParentCallSpacing.IncorrectLinesCountAfterLastControlStructure"/>
        <exclude name="SlevomatCodingStandard.Commenting.DisallowCommentAfterCode"/>
        <exclude name="SlevomatCodingStandard.Commenting.DisallowOneLinePropertyDocComment.OneLinePropertyComment"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.BlockControlStructureSpacing"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowShortTernaryOperator.DisallowedShortTernaryOperator"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.DisallowYodaComparison"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.JumpStatementsSpacing"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithoutParentheses"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.NewWithParentheses.MissingParentheses"/>
        <exclude name="SlevomatCodingStandard.ControlStructures.RequireYodaComparison"/>
        <exclude name="SlevomatCodingStandard.Files.LineLength"/>
        <exclude name="SlevomatCodingStandard.Files.TypeNameMatchesFileName"/>
        <exclude name="SlevomatCodingStandard.Functions.DisallowArrowFunction.DisallowedArrowFunction"/>
        <exclude name="SlevomatCodingStandard.Functions.RequireMultiLineCall"/>
        <exclude name="SlevomatCodingStandard.Functions.TrailingCommaInCall"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalConstants.NonFullyQualified"/>
        <exclude name="SlevomatCodingStandard.Namespaces.FullyQualifiedGlobalFunctions.NonFullyQualified"/>
        <exclude name="SlevomatCodingStandard.Namespaces.UseOnlyWhitelistedNamespaces"/>
        <exclude name="SlevomatCodingStandard.PHP.RequireNowdoc.RequiredNowdoc"/>
        <exclude name="SlevomatCodingStandard.TypeHints.DeclareStrictTypes.DeclareStrictTypesMissing"/>
        <exclude name="Squiz.Commenting.VariableComment.MissingVar"/>
        <exclude name="Squiz.Commenting.FunctionComment.MissingParamTag"/>
    </rule>

    <rule ref="SlevomatCodingStandard.ControlStructures.EarlyExit">
        <properties>
            <property name="ignoreOneLineTrailingIf" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Functions.ArrowFunctionDeclaration">
        <properties>
            <property name="spacesCountAfterKeyword" value="0"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
        <properties>
            <property name="allowFullyQualifiedGlobalConstants" value="true"/>
            <property name="allowFullyQualifiedExceptions" value="true"/>
        </properties>
    </rule>

    <rule ref="SlevomatCodingStandard.Whitespaces.DuplicateSpaces">
        <properties>
            <property name="ignoreSpacesInComment" value="true"/>
            <property name="ignoreSpacesBeforeAssignment" value="true"/>
        </properties>
    </rule>

    <!-- Force phpDocs separation between different annotations and remove extra `*` -->
    <!-- Require specific order of phpDoc annotations with empty newline between specific groups -->
    <rule ref="SlevomatCodingStandard.Commenting.DocCommentSpacing">
        <properties>
            <property name="linesCountBetweenAnnotationsGroups" value="1"/>
            <property name="linesCountBetweenDifferentAnnotationsTypes" value="0"/>
            <property name="annotationsGroups" type="array">
                <element value="
					@package,
					@since,
					@see,
					@link,
					@todo,
					@global,
					@var,
					@var,
					@param,
					@return,
					@throws,
					@internal,
					@deprecated,
					@codeCoverageIgnore,
					@phpcsSuppress,
					@psalm-suppress,
					@SuppressWarnings,
					@dataProvider,
                "/>
            </property>
        </properties>
    </rule>

</ruleset>
